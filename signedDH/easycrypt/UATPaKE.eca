(*
The following is a model of IND for unilateral authenticated two-pass
key exchange, as defined by Riepel and Rösler [0].

We abstract the fact that the operation is some iterated group
operation to avoid polluting the model, and to introduce an
abstraction barrier that allows us to later instantiate the assumption
with a modular group, an elliptic curve group, or even a group action.

[0]: https://github.com/charlie-j/fm-crypto-lib/blob/main/Notes/computational/main.pdf

Our goal with this formalisation is to stick as close as possible to
the pen-and-paper definitions. We hope to:
1) serve as a Rosetta stone to ease formal methods researcher's
interpretation of the pen-and-paper definitions without having to
recover the cryptographic intent of those definitions; and
2) serve as the basis for a baseline formalisation of Signed DH "as a
cryptographer would approach it".
*)
require import AllCore FSet FMap Distr.

(**
Types for long-term public and secret keys (server); client state
(client); pass-1 and pass-2 messages, and shared sessions keys.
**)
type pkey, skey, client_state, msg1, msg2, sskey.

op [lossless full uniform] dssk: sskey distr.

(** The syntax of a UATPaKE **)
module type UATPaKE = {
  proc gen(): pkey * skey

  proc init(s_id: pkey): client_state * msg1
  proc resp(s_sk: skey, c: msg1): sskey * msg2
  proc recv(st: client_state, c: msg2): sskey option
}.

(**
We want the definition to be parameterised by a Random Oracle. (There
are good reasons why we can't just write the definition, then add the
Random Oracle; but those are kind of complex to explain in a
tutorial.)

But we do not want to restrict *how* the random oracle is used by the
protocol. So we declare also abstract types for the input and output
of the random oracle, as well as the distribution it samples outputs
from. (Typically, but not always, uniform.)
**)
type ro_in, ro_out.
op d_ro: ro_out distr.

module type RO = {
  proc init(): unit
  proc get(_: ro_in): ro_out
}.

module type UATPaKE_RO (O : RO) = { include UATPaKE }.

(*
We now define directly the IND experiment from Riepel and Rösler
[Figure 6, 0].
*)

(**
We define the adversary's interface: which oracles does she have
access to?
**)
module type UATPaKE_RO_Oracles = {
  (* Party management *)
  proc gen(): pkey
  proc corrupt(j: int): skey option
  proc expose(i: int): client_state option

  (* Protocol ops *)
  proc init(pk: pkey): msg1
  proc respond(j: int, c: msg1, b_test: bool): (sskey * msg2) option
  proc receive(i: int, c: msg2, b_test: bool): sskey option

  (* Random oracle *)
  (* We expose the random oracle here for similarly complex reasons. *)
  proc h(_: ro_in): ro_out
}.

(**
We can then define the class of algorithms we consider for the
adversary: all `distinguish` procedures that, given access to the
oracles declared above, output a bit.
**)
module type Adv_UATPaKE_RO (P : UATPaKE_RO_Oracles) = {
  proc distinguish(): bool
}.

module Exp_b (P : UATPaKE_RO) (O : RO) (A : Adv_UATPaKE_RO) = {
  (* The challenge bit *)
  var b_ror : bool

  (* Server maps: *)
  var m: int
  (* - server handle to keypair *)
  var pk_map: (int, pkey) fmap
  var sk_map: (int, skey) fmap
  (* - server-client handle to partial trace *)
  var r_map: (int option * int, msg2 fset) fmap

  (* Client maps: *)
  var n: int
  (* - client handle to state *)
  var c_map: (int, client_state) fmap
  (* - client handle to intended partner *)
  var p_map: (int, int) fmap
  (* - client handle to partial trace (early partnering) *)
  var i_map: (int, msg1) fmap

  var q   : int fset
  var ich : int fset
  var rch : int fset
  var xp  : int fset
  var cr  : int fset

  module Oracles = {
    proc gen(): pkey = {
      var pk, sk;

      m <- m + 1;
      (pk, sk) <@ P(O).gen();
      pk_map.[m] <- pk;
      sk_map.[m] <- sk;
      return pk;
    }

    proc corrupt(j: int): skey option = {
      var r <- None;

      if (0 < j <= m) {
        r <- sk_map.[j];
        cr <- cr `|` fset1 j;
      }
      return r;
    }

    proc expose(i) = {
      var r <- None;

      if (0 < i <= n /\ i \notin ich) {
        xp <- xp `|` fset1 i;
        r <- c_map.[i];
      }
      return r;
    }

    proc init(pk: pkey): msg1 = {
      var st, c, jo;

      n <- n + 1;
      (st, c) <@ P(O).init(pk);
      c_map.[n] <- st;
      jo <- find (fun _ pk_j=> pk_j = pk) pk_map;
      if (jo is Some j) {
        p_map.[n] <- j;
        i_map.[n] <- c;
      }
      return c;
    }

    proc respond(j: int, c: msg1, ch: bool): (sskey * msg2) option = {
      var k, c', io, sk_j;
      var r <- None;

      if (0 < j <= m) {
        sk_j <- oget sk_map.[j];
        (k, c') <@ P(O).resp(sk_j, c);
        io <- find (fun i _=> p_map.[i] = Some j /\ i_map.[i] = Some c) c_map;
        if (io is Some i) {
          (*** Instead of initialising all of r_map to output the
          empty set, we read undefined entries as the empty set
          here. ***)
          r_map.[Some j, i] <- (odflt fset0 r_map.[Some j, i]) `|` fset1 c';
          if (ch /\ i \notin xp) {
            if (b_ror) { k <$ dssk; }
            ich <- ich `|` fset1 i;
          }
        }
        r <- Some (k, c');
      }
      return r;
    }

    proc receive(i: int, c: msg2, ch: bool): sskey option = {
      var st_i, k;
      var ko <- None;

      if (0 < i <= n /\ i \notin q) {
        st_i <- oget c_map.[i];
        q <- q `|` fset1 i;
        if (c \notin odflt fset0 r_map.[p_map.[i], i]) {
          ko <@ P(O).recv(st_i, c);
          if (   ch
              /\ i \notin xp
              /\ p_map.[i] <> None /\ 0 < oget p_map.[i] <= m /\ oget p_map.[i] \notin cr
              /\ ko <> None) {
            if (b_ror) { k <$ dssk; ko <- Some k; }
            ich <- ich `|` fset1 i;
          }
        }
      }
      return ko;
    }

    proc h = O.get
  }

  proc run(b) = {
    var b';

    O.init();

    b_ror <- b;

    m <- 0;
    n <- 0;

    q <- fset0;
    ich <- fset0;
    rch <- fset0;
    xp <- fset0;
    cr <- fset0;

    p_map <- empty;
    i_map <- empty;
    r_map <- empty;

    pk_map <- empty;
    sk_map <- empty;
    c_map <- empty;

    b' <@ A(Oracles).distinguish();
    return b';
  }
}.
